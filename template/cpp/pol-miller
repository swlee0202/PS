#include <bits/stdc++.h>
#pragma GCC optimize("O3")
#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
using namespace std;

#define big __int128_t
#define ll long long
#define endl '\n'
#define Endl '\n'
#define fio ios::sync_with_stdio(0); cin.tie(0);
#define fi first
#define se second
#define pii pair<int,int>
#define arr vector<int>
#define parr vector<pii>
#define check cout<<'e'<<endl;
#define append push_back

int n,m;
ll t=0;
arr a;

arr prime={2,325,9375,28178,450775,9780504,1795265022};

ll bj(ll p,ll i,ll mod)
{
	if (i==0) return 1;
	if (i==1) return p;
	ll ans;
	ans=bj(p,i>>1,mod);
	if (i&1)
	{
		return (((ans*ans)%mod)*p)%mod;
	}
	else
	{
		return (ans*ans)%mod;
	}
}

bool isp(int n) {
	if (n<2||n%6%4!=1) return (n|1)==3;
	int s=__builtin_ctzll(n-1),d=n>>s;
	for (int a:prime) 
    {   
		int p=bj(a%n,d,n),i=s;
		while (p!=1&&p!=n-1&&a%n&&i--) p=p*p%n;
		if (p!=n-1&&i!=s) return 0;
	}
	return 1;
}

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
int f(int x, int c,int n) 
{
    return (x*x+c)%n;
}
int pol(int n)
{
    if ((n&1)==0) return 2;
    if (isp(n)) return n;
    while (true)
    {
        int x=uniform_int_distribution<ll>(2,n-1)(rng);
        int y=x;
        int c=uniform_int_distribution<ll>(1,n-1)(rng);
        int d=1;
        while (d==1)
        {
            x=f(x,c,n);
            y=f(f(y,c,n),c,n);
            d=__gcd((int)abs(x-y),n);
        }
        if (d!=n) return d;
    }
}

arr factor(int n)
{
    if (n==1) return {};
    if (isp(n)) return {n};
    int d=pol(n);
    arr a,b;
    a=factor(d);
    b=factor(n/d);
    for (int i:b) a.append(i);
    return a;
}
